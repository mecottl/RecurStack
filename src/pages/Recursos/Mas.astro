---
// src/pages/mas.astro
import Layout from "../../layouts/Layout.astro";
import InfoCard from "../../components/InfoCard.astro";
import { createClient } from "@supabase/supabase-js";
import "../../styles/formCard.css";
import "../../styles/pages.css";

const supabase = createClient(
    import.meta.env.SUPABASE_URL,
    import.meta.env.SUPABASE_ANON_KEY,
);

// SSR: trae todas las cards ordenadas por favoritas primero
const { data, error } = await supabase.from("cards").select("*");

if (error) {
    console.error("Error fetching cards:", error.message);
}

// Asegurarse de que cards sea siempre un array
const cards = data ?? [];
---

<Layout title="Comunidad">
    <h1 class="h1-form">
        Colabora con la comunidad compartiendonos tus recursos!!
    </h1>
    <!-- Formulario para añadir nuevas cards -->
    <div class="form-container">
        <form id="new-card-form" class="card-form">
            <input name="title" required placeholder="Título" />
            <input name="author" placeholder="Autor" />
            <input name="description" required placeholder="Descripción" />
            <input name="img" required placeholder="URL imagen" />
            <input name="href" required placeholder="Enlace externo" />
            <input name="tags" placeholder="Tags (coma-separadas)" />
            <button type="submit">Añadir Card</button>
        </form>
    </div>

    <!-- Listado de cards usando siempre InfoCard -->
    <section class="cards">
        {cards.map((card) => <InfoCard card={card} />)}
    </section>

    <script type="module">
        const form = document.getElementById("new-card-form");
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const fd = new FormData(form);
            const payload = {
                title: fd.get("title"),
                author: fd.get("author"),
                description: fd.get("description"),
                img: fd.get("img"),
                href: fd.get("href"),
                tags: fd
                    .get("tags")
                    .toString()
                    .split(",")
                    .map((t) => t.trim())
                    .filter(Boolean),
            };
            try {
                const res = await fetch("/api/cards", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload),
                });
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}: ${await res.text()}`);
                }
                // éxito
                window.location.reload();
            } catch (err) {
                console.error("Fetch error:", err);
                alert(
                    "Error al crear la card; mira la consola para más detalles.",
                );
            }
        });
    </script>
</Layout>
